Recursion Notes:

Recursion is a strategy to solve problems in terms of the problem itself. Meaning in a function in the body of that function it'll refer to the function itself.

**note on call stacks - Recursion is kinda like a slinky. Lets say you have a list, if you were to get the sum of that list with recursion you would first got through the whole list popping each element as it went until the base case has been meant. Then it'll work backwards adding each element starting from the last it popped to the first until its gone through it all in which it could return the sum.


Base Case - Some sort of condition that tells the function whether it should recurse or not

Recursive Step - This part of the function moves you a step closer to the base case.



Ex.

In a recursive function, the “counting variable” equivalent is the argument to the recursive call. If we’re counting down to 0, for example, our base case would be the function call that receives 0 as an argument. We might design a recursive step that takes the argument passed in, decrements it by one, and calls the function again with the decremented argument. In this way, we would be moving towards 0 as our base case.


 